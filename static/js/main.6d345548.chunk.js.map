{"version":3,"sources":["App.tsx","index.tsx"],"names":["COLOR","PIECE","ClickState","isBlackSquare","x_index","y_index","generateInitialBoard","firstRank","W_Rook","W_Knight","W_Bishop","W_Queen","W_King","secondRank","W_Pawn","eighthRank","B_Rook","B_Knight","B_Bishop","B_Queen","B_King","seventhRank","B_Pawn","emptyRank","NOPIECE","wrap","rank","arr","getYIndex","squares","map","e","i","piece","position","Unclicked","Slider","props","type","min","max","step","defaultValue","className","onChange","LetterSquare","pieceDisplayLetters","Map","squareColorClass","clazz","onClick","preventDefault","console","log","get","Rank","sqProps","ChessBoard","boardConfig","chessBoardStyle","style","rankProps","App","React","useState","fontSize","setFontSize","sliderProps","target","value","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6d345548.chunk.js","sourcesContent":["import React from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport piecesImg from './pieces.png';\n\n\nenum COLOR {\n\tBlack, White\n}\n\nenum PIECE {\n\tW_Pawn, W_Rook, W_Knight, W_Bishop, W_Queen, W_King, NOPIECE,\n\tB_Pawn, B_Rook, B_Knight, B_Bishop, B_Queen, B_King\n}\n\ninterface ISquarePosition { x_index: number, y_index: number}\n\nconst X_POSITIONS : string = 'abcdefgh';\n\nfunction getXIndex(file : string) : number {\n\t\n\tconst lower = file.toLowerCase();\n\n\treturn X_POSITIONS.indexOf(lower) ;\n}\n\nconst getFile = (index : number) : string =>  X_POSITIONS[index];\nconst getYIndex = (rank: number) : number =>  rank - 1;\nconst getRank = (index : number) : number => index + 1;\nconst isBlackSquare = ({x_index, y_index}) :  ISquarePosition => (x_index + y_index) % 2 == 0;\n\nconst BOARD_SIZE : number = 8 ;\n\n\n\nfunction generateInitialBoard() : Array<Array<PIECE>>{\n\t\n\t\n\tconst firstRank : Array<PIECE> = [ \n\t\tPIECE.W_Rook, PIECE.W_Knight, PIECE.W_Bishop, PIECE.W_Queen, PIECE.W_King, PIECE.W_Bishop, PIECE.W_Knight, PIECE.W_Rook\n\t]; \n\tconst secondRank : Array<PIECE> = [\n\t\tPIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn\n\t];\n\tconst eighthRank : Array<PIECE> = [\n\t\tPIECE.B_Rook, PIECE.B_Knight, PIECE.B_Bishop, PIECE.B_Queen, PIECE.B_King, PIECE.B_Bishop, PIECE.B_Knight, PIECE.B_Rook\n\t];\n\tconst seventhRank : Array<PIECE> = [\n\t\tPIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn\n\t];\n\t\n\tconst emptyRank = () => [PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE];\n\t\n\tconst wrap = (rank : number, arr : Array<PIECE>) : IRankProps => {\n\t\t\n\t\tconst y_index : number = getYIndex(rank);\n\t\t\n\t\treturn {\n\t\t\tsquares : arr.map( (e,i) :ISquareProps => {\n\t\t\t\treturn {\n\t\t\t\t\tpiece : e,\n\t\t\t\t\tposition : { \n\t\t\t\t\t\tx_index: i, \n\t\t\t\t\t\ty_index: y_index\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t})\n\t\t};\n\t};\n\t\n\tconst board : Array<IRankProps> = [ \n\t\twrap(1, firstRank) , \n\t\twrap(2, secondRank), \n\t\twrap(3, emptyRank()), \n\t\twrap(4, emptyRank()), \n\t\twrap(5, emptyRank()), \n\t\twrap(6, emptyRank()), \n\t\twrap(7,seventhRank), \n\t\twrap(8, eighthRank)\n\t];\n\t\n\treturn board;\n};\n\nenum ClickState {\n\tUnclicked, FirstClicked, SecondClicked\n}\n\ninterface IBoardState {\n\tboardConfig : Array<Array<PIECE>>;\n\tclickState : ClickState;\n\tfirstClicked : ISquarePosition;\n\tsecondClicked : ISquarePosition;\n}\n\nconst boardState : IBoardState = {\n\tboardConfig : generateInitialBoard(),\n\tclickState : ClickState.Unclicked,\n\tfirstClicked : null,\n\tsecondClicked : null\n};\n\nconsole.log(\"Initial board\", generateInitialBoard());\n\n\ninterface ISliderProps {\n\tmin : number;\n\tmax : number;\n\tstep : number;\n\tdefaultValue : number;\n\tclassName : string;\n\tonChange : any;\n}\n\nfunction Slider(props : ISliderProps) {\n\treturn <div>\n\t\t\tSlide to change board size \n\t\t\t<input type=\"range\" \t\n\t\t\tmin={props.min} \n\t\t\tmax={props.max}  \n\t\t\tstep={props.step}\n\t\t\tdefaultValue={props.defaultValue}\n\t\t\tclassName={props.className} \n\t\t\tonChange={props.onChange} />\n\t\t</div>;\n};\n\n\n\ninterface ISquareProps {\n\tpiece : PIECE,\n\tposition? : ISquarePosition,\n\tonClick? : () => ISquarePosition;\n}\n\nfunction Square({piece, position} : ISquareProps) {\n\t\n\tconst CSS_CLASS = new Map<PIECE, string>([\n\t  [PIECE.W_Pawn, 'WhitePawn'],\n\t  [PIECE.W_Rook, 'WhiteRook'],\n\t  [PIECE.W_Knight, 'WhiteKnight'],\n\t  [PIECE.W_Bishop, 'WhiteBishop'],\n\t  [PIECE.W_Queen, 'WhiteQueen'],\n\t  [PIECE.W_King, 'WhiteKing'],\n\t  [PIECE.B_Pawn, 'BlackPawn'],\n\t  [PIECE.B_Rook, 'BlackRook'],\n\t  [PIECE.B_Knight, 'BlackKnight'],\n\t  [PIECE.B_Bishop, 'BlackBishop'],\n\t  [PIECE.B_Queen, 'BlackQueen'],\n\t  [PIECE.B_King, 'BlackKing'],\n\t  [PIECE.NOPIECE, '']\n\t]);\n\t\n\tconst squareColorClass = isBlackSquare(position) ? 'BlackSquare' : 'WhiteSquare';\n\tconst pieceClass = CSS_CLASS.get(piece);\n\t\n\tconst clazz = `${pieceClass} ${squareColorClass}`;\n\t\n\treturn <div className={clazz}> </div>;\n};\n\nfunction LetterSquare({piece, position} : ISquareProps) {\n\t\n\tconst pieceDisplayLetters = new Map<PIECE, string>([\n\t  [PIECE.W_Pawn, 'P'],\n\t  [PIECE.W_Rook, 'R'],\n\t  [PIECE.W_Knight, 'N'],\n\t  [PIECE.W_Bishop, 'B'],\n\t  [PIECE.W_Queen, 'Q'],\n\t  [PIECE.W_King, 'K'],\n\t  [PIECE.B_Pawn, 'P'],\n\t  [PIECE.B_Rook, 'R'],\n\t  [PIECE.B_Knight, 'N'],\n\t  [PIECE.B_Bishop, 'B'],\n\t  [PIECE.B_Queen, 'Q'],\n\t  [PIECE.B_King, 'K'],\n\t  [PIECE.NOPIECE, '']\n\t]);\n\t\n\tconst squareColorClass = isBlackSquare(position) ? 'BlackSquare' : 'WhiteSquare';\t\n\tconst clazz = `${squareColorClass}`;\n\t\n\tconst handleClick = e => {\n\t\te.preventDefault();\n\t\t\n\t\tconsole.log('Clicked ' , position);\n\t\t//onClick(position);\n\t};\n\t\n\treturn <div className={clazz} onClick={handleClick}>\n\t\t<span className=\"SquareLetter\"> { pieceDisplayLetters.get(piece)} </span>\n\t</div>;\n};\n\n\ninterface IRankProps {\n\tsquares : Array<ISquareProps>\n}\n\nfunction Rank({squares} : IRankProps) {\n\treturn (\n\t\t<div className=\"Rank\">\n\t\t\t{ \n\t\t\t\tsquares.map( (sqProps,i) => <LetterSquare key={i} {...sqProps}  />)\n\t\t\t}\n\t\t</div>\n\t);\n};\n\n\ninterface IChessBoardProps {\n\tboardConfig : Array<IRankProps>;\n\tchessBoardStyle : any;\n}\n\nfunction ChessBoard({boardConfig , chessBoardStyle} : IChessBoardProps) {\n\t\n\treturn (\n\t\t<div className=\"ChessBoard\" style={chessBoardStyle}>\n\t\t\t{\n\t\t\t\tboardConfig.map( (rankProps, i) => {\n\t\t\t\t\treturn <Rank key={i} {...rankProps} />;\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nfunction App() {\n\t\n\tconst [ fontSize , setFontSize ] = React.useState(20); // in px\n\t\n\tconst sliderProps : ISliderProps = {\n\t\tmin : 10,\n\t\tmax : 30,\n\t\tstep : 1,\n\t\tdefaultValue : fontSize,\n\t\tclassName : 'Slider',\n\t\tonChange : (e) => {\n\t\t\te.preventDefault();\n\t\t\tsetFontSize(e.target.value);\n\t\t}\n\t};\n\t\n\tconsole.log('Font size is ' , fontSize);\n\t\n\tconst chessBoardStyle = { \"font-size\" : `${fontSize}px`};\n\t\n\treturn (\n\t\t<div className=\"App \">\n\t\t\t<div>\n\t\t\t\t<Slider {...sliderProps} />\n\t\t\t</div>\n\t\t\t\n\t\t\t<div className=\"ChessBoardWrapperDiv\" >\n\t\t\t\t<ChessBoard boardConfig={generateInitialBoard()} chessBoardStyle={chessBoardStyle}/>\n\t\t\t</div>\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}