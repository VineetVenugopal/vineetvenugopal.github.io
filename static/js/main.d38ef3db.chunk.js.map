{"version":3,"sources":["App.tsx","index.tsx"],"names":["COLOR","PIECE","CSS_CLASS","Map","W_Pawn","W_Rook","W_Knight","W_Bishop","W_Queen","W_King","B_Pawn","B_Rook","B_Knight","B_Bishop","B_Queen","B_King","NOPIECE","generateInitialBoard","firstRank","secondRank","eighthRank","seventhRank","emptyRank","wrap","rank","arr","y_index","getYIndex","squares","map","e","i","piece","position","x_index","Square","squareColorClass","pieceClass","get","clazz","className","Rank","sqProps","ChessBoard","boardConfig","chessBoardStyle","style","rankProps","console","log","App","type","min","max","value","class","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d38ef3db.chunk.js","sourcesContent":["import logo from './logo.svg';\nimport './App.scss';\nimport piecesImg from './pieces.png';\n\n\nenum COLOR {\n\tBlack, White\n}\n\nenum PIECE {\n\tW_Pawn, W_Rook, W_Knight, W_Bishop, W_Queen, W_King, NOPIECE,\n\tB_Pawn, B_Rook, B_Knight, B_Bishop, B_Queen, B_King\n}\n\nconst CSS_CLASS = new Map<PIECE, string>([\n  [PIECE.W_Pawn, 'WhitePawn'],\n  [PIECE.W_Rook, 'WhiteRook'],\n  [PIECE.W_Knight, 'WhiteKnight'],\n  [PIECE.W_Bishop, 'WhiteBishop'],\n  [PIECE.W_Queen, 'WhiteQueen'],\n  [PIECE.W_King, 'WhiteKing'],\n  [PIECE.B_Pawn, 'BlackPawn'],\n  [PIECE.B_Rook, 'BlackRook'],\n  [PIECE.B_Knight, 'BlackKnight'],\n  [PIECE.B_Bishop, 'BlackBishop'],\n  [PIECE.B_Queen, 'BlackQueen'],\n  [PIECE.B_King, 'BlackKing'],\n  [PIECE.NOPIECE, '']\n]);\n\ninterface ISquarePosition { x_index: number, y_index: number}\n\ninterface ISquareProps {\n\tpiece : PIECE,\n\tposition? : ISquarePosition\n}\n\ninterface IRankProps {\n\tsquares : Array<ISquareProps>\n}\n\ninterface IChessBoardProps {\n\tboardConfig : Array<IRankProps>;\n\tchessBoardStyle : any;\n}\n\n\n\n\nconst X_POSITIONS : string = 'abcdefgh';\n\nfunction getXIndex(file : string) : number {\n\t\n\tconst lower = file.toLowerCase();\n\n\treturn X_POSITIONS.indexOf(lower) ;\n}\n\nconst getFile = (index : number) : string =>  X_POSITIONS[index];\nconst getYIndex = (rank: number) : number =>  rank - 1;\nconst getRank = (index : number) : number => index + 1;\nconst isBlackSquare = ({x_index, y_index}) :  ISquarePosition => (x_index + y_index) % 2 == 0;\n\nconst BOARD_SIZE : number = 8 ;\n\n\n\nfunction generateInitialBoard() : Array<Array<PIECE>>{\n\t\n\t\n\tconst firstRank : Array<PIECE> = [ \n\t\tPIECE.W_Rook, PIECE.W_Knight, PIECE.W_Bishop, PIECE.W_Queen, PIECE.W_King, PIECE.W_Bishop, PIECE.W_Knight, PIECE.W_Rook\n\t]; \n\tconst secondRank : Array<PIECE> = [\n\t\tPIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn\n\t];\n\tconst eighthRank : Array<PIECE> = [\n\t\tPIECE.B_Rook, PIECE.B_Knight, PIECE.B_Bishop, PIECE.B_Queen, PIECE.B_King, PIECE.B_Bishop, PIECE.B_Knight, PIECE.B_Rook\n\t];\n\tconst seventhRank : Array<PIECE> = [\n\t\tPIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn\n\t];\n\t\n\tconst emptyRank = () => [PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE];\n\t\n\tconst wrap = (rank : number, arr : Array<PIECE>) : IRankProps => {\n\t\t\n\t\tconst y_index : number = getYIndex(rank);\n\t\t\n\t\treturn {\n\t\t\tsquares : arr.map( (e,i) :ISquareProps => {\n\t\t\t\treturn {\n\t\t\t\t\tpiece : e,\n\t\t\t\t\tposition : { \n\t\t\t\t\t\tx_index: i, \n\t\t\t\t\t\ty_index: y_index\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t})\n\t\t};\n\t};\n\t\n\tconst BOARD : Array<IRankProps> = [ \n\t\twrap(1, firstRank) , \n\t\twrap(2, secondRank), \n\t\twrap(3, emptyRank()), \n\t\twrap(4, emptyRank()), \n\t\twrap(5, emptyRank()), \n\t\twrap(6, emptyRank()), \n\t\twrap(7,seventhRank), \n\t\twrap(8, eighthRank)\n\t];\n\t\n\treturn BOARD;\n};\n\nconsole.log(\"Initial board\", generateInitialBoard());\n\n\n\nfunction Square({piece, position} : ISquareProps) {\n\t\n\tconst squareColorClass = isBlackSquare(position) ? 'BlackSquare' : 'WhiteSquare';\n\tconst pieceClass = CSS_CLASS.get(piece);\n\t\n\tconst clazz = `${pieceClass} ${squareColorClass}`;\n\t\n\treturn <div className={clazz}> </div>;\n};\n\nfunction Rank({squares} : IRankProps) {\n\treturn (\n\t\t<div className=\"Rank\">\n\t\t\t{ \n\t\t\t\tsquares.map( (sqProps,i) => <Square key={i} {...sqProps} />)\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nfunction ChessBoard({boardConfig , chessBoardStyle} : IChessBoardProps) {\n\t\n\t//const chessBoardStyle = { \"font-size\" : '15px'};\n\t\n\treturn (\n\t\t<div className=\"ChessBoard\" style={chessBoardStyle}>\n\t\t\t{\n\t\t\t\tboardConfig.map( (rankProps, i) => {\n\t\t\t\t\treturn <Rank key={i} {...rankProps} />;\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n};\n\nfunction Slider() {\n\t\n};\n\nfunction App() {\n\t\n\tconst chessBoardStyle = { \"font-size\" : '15px'};\n\t\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div>\n\t\t\t\t<ChessBoard boardConfig={generateInitialBoard()} chessBoardStyle={chessBoardStyle}/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<input type=\"range\" min=\"1\" max=\"100\" value=\"50\" class=\"slider\" id=\"myRange\" />\n\t\t\t</div>\n\t\t\t\n\t\t</div>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}