{"version":3,"sources":["interfaces.tsx","misc.tsx","state.tsx","App.tsx","index.tsx"],"names":["PIECE","ClickState","ActionType","white","cssClass","letter","isBlackSquare","x_index","y_index","areSameSquares","a","b","getBoardSquareProps","board","position","squares","getBoardPiece","piece","setBoardPiece","boardState","boardConfig","firstRank","W_Rook","W_Knight","W_Bishop","W_Queen","W_King","secondRank","W_Pawn","eighthRank","B_Rook","B_Knight","B_Bishop","B_Queen","B_King","seventhRank","B_Pawn","emptyRank","NOPIECE","wrap","rank","arr","getYIndex","map","e","i","generateInitialBoard","clickState","Unclicked","firstClicked","secondClicked","store","createStore","state","action","type","SquareClick","FirstClicked","newBoard","JSON","parse","stringify","clickSqPosition","p1","p2","console","log","SecondClicked","window","__REDUX_DEVTOOLS_EXTENSION__","clickSelector","Slider","props","min","max","step","defaultValue","className","onChange","ToggleButton","value","onToggle","useState","toggle","setToggle","toggleClasses","classNames","onClick","aria-label","Square","useSelector","dispatch","useDispatch","squareColorClass","BlackSquare","WhiteSquare","SquareFirstClicked","SquareSecondClicked","pieceClass","clazz","preventDefault","LetterSquare","letterColorClass","letterClass","initialContext","isSquareImgType","toggleSqImgType","ThemeContext","React","createContext","Rank","sqProps","Consumer","ChessBoard","chessBoardStyle","style","rankProps","App","fontSize","setFontSize","themeContext","setThemeContext","sliderProps","target","Provider","ctx","ReactDOM","render","StrictMode","Store","document","getElementById"],"mappings":"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","file":"static/js/main.154f411c.chunk.js","sourcesContent":["\r\n\r\nexport enum PIECE {\r\n\tW_Pawn = {\r\n\t\twhite : true,\r\n\t\tcssClass : 'WhitePawn',\r\n\t\tletter : 'P'\r\n\t}, \r\n\tW_Rook = {\r\n\t\twhite : true,\r\n\t\tcssClass : 'WhiteRook',\r\n\t\tletter : 'R'\r\n\t},\r\n\tW_Knight = {\r\n\t\twhite : true,\r\n\t\tcssClass : 'WhiteKnight',\r\n\t\tletter : 'N'\r\n\t}, \r\n\tW_Bishop = {\r\n\t\twhite : true,\r\n\t\tcssClass : 'WhiteBishop',\r\n\t\tletter : 'B'\r\n\t}, \r\n\tW_Queen = {\r\n\t\twhite : true,\r\n\t\tcssClass : 'WhiteQueen',\r\n\t\tletter : 'Q'\r\n\t}, \r\n\tW_King = {\r\n\t\twhite : true,\r\n\t\tcssClass : 'WhiteKing',\r\n\t\tletter : 'K'\r\n\t}, \r\n\tNOPIECE = {\r\n\t\twhite : true,\r\n\t\tcssClass : '',\r\n\t\tletter : ''\r\n\t}, \r\n\tB_Pawn = {\r\n\t\twhite : false,\r\n\t\tcssClass : 'BlackPawn',\r\n\t\tletter : 'P'\r\n\t}, \r\n\tB_Rook = {\r\n\t\twhite : false,\r\n\t\tcssClass : 'BlackRook',\r\n\t\tletter : 'R'\r\n\t}, \r\n\tB_Knight = {\r\n\t\twhite : false,\r\n\t\tcssClass : 'BlackKnight',\r\n\t\tletter : 'N'\r\n\t}, \r\n\tB_Bishop = {\r\n\t\twhite : false,\r\n\t\tcssClass : 'BlackBishop',\r\n\t\tletter : 'B'\r\n\t}, \r\n\tB_Queen = {\r\n\t\twhite : false,\r\n\t\tcssClass : 'BlackQueen',\r\n\t\tletter : 'Q'\r\n\t}, \r\n\tB_King = {\r\n\t\twhite : false,\r\n\t\tcssClass : 'BlackKing',\r\n\t\tletter : 'K'\r\n\t}\r\n}\r\n\r\nexport interface ISquarePosition { x_index: number, y_index: number}\r\n\r\nexport enum ClickState {\r\n\tUnclicked, FirstClicked, SecondClicked\r\n}\r\n\r\nexport interface IBoardState {\r\n\tboardConfig : Array<IRankProps>;\r\n\tclickState : ClickState;\r\n\tfirstClicked : ISquarePosition;\r\n\tsecondClicked : ISquarePosition;\r\n}\r\n\r\n\r\n\r\nexport interface ISliderProps {\r\n\tmin : number;\r\n\tmax : number;\r\n\tstep : number;\r\n\tdefaultValue : number;\r\n\tclassName : string;\r\n\tonChange : any;\r\n};\r\n\r\n\r\nexport interface IRankProps {\r\n\tsquares : Array<ISquareProps>\r\n}\r\n\r\n\r\nexport interface IChessBoardProps {\r\n\tboardConfig : Array<IRankProps>;\r\n\tchessBoardStyle : any;\r\n}\r\n\r\n\r\nexport interface ISquareProps {\r\n\tpiece : PIECE,\r\n\tposition? : ISquarePosition,\r\n\tonClick? : () => ISquarePosition;\r\n}\r\n\r\nexport interface IStateChangeAction {\r\n\ttype : ActionType;\r\n\tclickSqPosition? : ISquarePosition;\r\n};\r\n\r\nexport enum ActionType {\r\n\tSquareClick\r\n}\r\n\r\nexport interface IContext {\r\n\tisSquareImgType : boolean;\r\n\tonSquareTypeToggle? : () => void;\r\n}","import {ISquareProps, PIECE, IRankProps} from './interfaces';\r\n\r\nexport const X_POSITIONS : string = 'abcdefgh';\r\n\r\nexport function getXIndex(file : string) : number {\r\n\t\r\n\tconst lower = file.toLowerCase();\r\n\r\n\treturn X_POSITIONS.indexOf(lower) ;\r\n}\r\n\r\nexport const getFile = (index : number) : string =>  X_POSITIONS[index];\r\nexport const getYIndex = (rank: number) : number =>  rank - 1;\r\nexport const getRank = (index : number) : number => index + 1;\r\nexport const isBlackSquare = ({x_index, y_index}) :  ISquarePosition => (x_index + y_index) % 2 === 0;\r\n\r\nexport const BOARD_SIZE : number = 8 ;\r\n\r\nexport const areSameSquares = (a : ISquarePosition, b : ISquarePosition) => {\r\n\t\r\n\tif (a == null || b == null) return false;\r\n\t\r\n\treturn a.x_index == b.x_index && a.y_index == b.y_index\r\n}\r\n\r\n// board : Array<IRankProps>, \r\n\t\t//\r\n\r\nexport function getBoardSquareProps(board : Array<IRankProps>, position : ISquarePosition ) : ISquareProps {\r\n\tconst rank : IRankProps = board[position.y_index];\r\n\t\r\n\tconst sqProps : ISquareProps = rank.squares[position.x_index];\r\n\t\r\n\treturn sqProps;\r\n}\r\n\r\nexport const getBoardPiece = (\r\n\t\tboard : Array<IRankProps>, \r\n\t\tposition : ISquarePosition\r\n\t) : PIECE => getBoardSquareProps(board, position).piece;\r\n\r\nexport const setBoardPiece = (\r\n\t\tboard : Array<IRankProps>, \r\n\t\tposition : ISquarePosition, \r\n\t\tpiece : PIECE\r\n\t) : void  => { \r\n\t\t\r\n\tconst sqProps : ISquareProps = getBoardSquareProps(board, position);\r\n\t\r\n\tsqProps.piece = piece;\r\n};\r\n","import { createStore } from 'redux';\r\nimport {ISliderProps, ISquarePosition, ISquareProps, PIECE, IRankProps, IChessBoardProps, ClickState, IStateChangeAction, ActionType} from './interfaces';\r\nimport { getYIndex , getBoardPiece, setBoardPiece } from './misc';\r\n\r\n\r\n\r\nfunction generateInitialBoard() : Array<Array<PIECE>>{\r\n\t\r\n\t\r\n\tconst firstRank : Array<PIECE> = [ \r\n\t\tPIECE.W_Rook, PIECE.W_Knight, PIECE.W_Bishop, PIECE.W_Queen, PIECE.W_King, PIECE.W_Bishop, PIECE.W_Knight, PIECE.W_Rook\r\n\t]; \r\n\tconst secondRank : Array<PIECE> = [\r\n\t\tPIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn, PIECE.W_Pawn\r\n\t];\r\n\tconst eighthRank : Array<PIECE> = [\r\n\t\tPIECE.B_Rook, PIECE.B_Knight, PIECE.B_Bishop, PIECE.B_Queen, PIECE.B_King, PIECE.B_Bishop, PIECE.B_Knight, PIECE.B_Rook\r\n\t];\r\n\tconst seventhRank : Array<PIECE> = [\r\n\t\tPIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn, PIECE.B_Pawn\r\n\t];\r\n\t\r\n\tconst emptyRank = () => [PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE, PIECE.NOPIECE];\r\n\t\r\n\tconst wrap = (rank : number, arr : Array<PIECE>) : IRankProps => {\r\n\t\t\r\n\t\tconst y_index : number = getYIndex(rank);\r\n\t\t\r\n\t\treturn {\r\n\t\t\tsquares : arr.map( (e,i) :ISquareProps => {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpiece : e,\r\n\t\t\t\t\tposition : { \r\n\t\t\t\t\t\tx_index: i, \r\n\t\t\t\t\t\ty_index: y_index\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t})\r\n\t\t};\r\n\t};\r\n\t\r\n\tconst board : Array<IRankProps> = [ \r\n\t\twrap(1, firstRank) , \r\n\t\twrap(2, secondRank), \r\n\t\twrap(3, emptyRank()), \r\n\t\twrap(4, emptyRank()), \r\n\t\twrap(5, emptyRank()), \r\n\t\twrap(6, emptyRank()), \r\n\t\twrap(7,seventhRank), \r\n\t\twrap(8, eighthRank)\r\n\t];\r\n\t\r\n\treturn board;\r\n};\r\n\r\nexport const initialBoardConfig :Array<IRankProps> = generateInitialBoard();\r\n\r\n\r\nexport const boardState : IBoardState = {\r\n\tboardConfig : initialBoardConfig,\r\n\tclickState : ClickState.Unclicked,\r\n\tfirstClicked : null,\r\n\tsecondClicked : null\r\n};\r\n\r\n\r\nconst rootReducer = (state : IBoardState, action : IStateChangeAction) => {\r\n\tif (action.type === ActionType.SquareClick) {\r\n\t\t\r\n\t\tif (state.clickState == ClickState.FirstClicked) {\r\n\t\t\t\r\n\t\t\tconst boardConfig : Array<IRankProps> = state.boardConfig;\r\n\t\t\tconst firstClicked : ISquarePosition = state.firstClicked;\r\n\t\t\t\r\n\t\t\tconst newBoard = JSON.parse(JSON.stringify(boardConfig));\r\n\t\t\t//const newBoard = boardConfig;\r\n\t\t\t\r\n\t\t\tconst secondClicked = action.clickSqPosition;\r\n\t\t\t\r\n\t\t\tconst p1 = getBoardPiece(newBoard, firstClicked);\r\n\t\t\tconst p2 = getBoardPiece(newBoard, secondClicked);\r\n\t\t\tsetBoardPiece(newBoard, firstClicked, p2);\r\n\t\t\tsetBoardPiece(newBoard, secondClicked, p1);\r\n\t\t\t\r\n\t\t\tconsole.log(newBoard);\r\n\t\t\tconsole.log(newBoard === boardConfig);\r\n\t\t\t\r\n\t\t\treturn {\r\n\t\t\t\tboardConfig : newBoard,\r\n\t\t\t\tfirstClicked : firstClicked,\r\n\t\t\t\tsecondClicked : action.clickSqPosition, \r\n\t\t\t\tclickState : ClickState.SecondClicked\r\n\t\t\t};\r\n\t\t\t\r\n\t\t}\r\n\t\telse {\r\n\t\t\treturn {\r\n\t\t\t\t...state, \r\n\t\t\t\tclickState : ClickState.FirstClicked,\r\n\t\t\t\tfirstClicked: action.clickSqPosition\r\n\t\t\t};\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\treturn state;\r\n};\r\n\r\nexport const store = createStore(rootReducer,  boardState,\r\n\twindow.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport const clickSelector = (state : IBoardState) => state;\r\n\r\n","import React , {useState} from 'react';\nimport { Provider, useSelector, useDispatch } from 'react-redux';\nimport classNames from 'classnames';\nimport logo from './logo.svg';\nimport './App.scss';\nimport './Toggle.scss';\nimport piecesImg from './pieces.png';\nimport {initialBoardConfig, store as Store , clickSelector} from './state';\nimport {\n\tISliderProps, ISquarePosition, ISquareProps, PIECE, IRankProps, \n\tIChessBoardProps, IStateChangeAction, ActionType, ClickState,\n\tIContext\n} from './interfaces';\nimport { isBlackSquare, areSameSquares } from './misc';\n\n\nfunction Slider(props : ISliderProps) {\n\treturn <div>\n\t\t\tSlide to change board size \n\t\t\t<input type=\"range\" \t\n\t\t\tmin={props.min} \n\t\t\tmax={props.max}  \n\t\t\tstep={props.step}\n\t\t\tdefaultValue={props.defaultValue}\n\t\t\tclassName={props.className} \n\t\t\tonChange={props.onChange} />\n\t\t</div>;\n};\n\nconst ToggleButton = (props) => {\n\t\n\tconst { value, onToggle } = props;\n\t\n\tconst [toggle, setToggle] = useState(value);\n\t\n\tconst triggerToggle = () => {\n\t\tonToggle(!toggle);\n\t\tsetToggle(!toggle);\n\t\t\n\t};\n\t\n\tconst toggleClasses = classNames('wrg-toggle', {\n        'wrg-toggle--checked': toggle\n    });\n    \n\t\n    return(\n        <div className={toggleClasses} onClick={triggerToggle} >\n            <div className=\"wrg-toggle-container\">\n                <div className=\"wrg-toggle-check\">\n                    .\n                </div>\n                <div className=\"wrg-toggle-uncheck\">\n                   .\n                </div>\n            </div>\n            <div className=\"wrg-toggle-circle\"></div>\n            <input className=\"wrg-toggle-input\" type=\"checkbox\" aria-label=\"Toggle Button\" />\n        </div>\n    )\n};\n\n\n\nfunction Square({piece, position} : ISquareProps) {\n\n\tconst { clickState, firstClicked, secondClicked } = useSelector(clickSelector);\n\tconst dispatch = useDispatch();\n\n\tconst squareColorClass = classNames({\n\t\tBlackSquare : isBlackSquare(position),\n\t\tWhiteSquare : !isBlackSquare(position),\n\t\tSquareFirstClicked : clickState === ClickState.FirstClicked && areSameSquares(position, firstClicked),\n\t\tSquareSecondClicked : clickState === ClickState.SecondClicked && areSameSquares(position, secondClicked)\n\t});\n\t\n\tconst pieceClass = piece.cssClass;\n\t\n\tconst clazz = `${pieceClass} ${squareColorClass}`;\n\t\n\tconst handleClick = e => {\n\t\te.preventDefault();\n\t\t\n\t\tconst action : IStateChangeAction = {\n\t\t\ttype : ActionType.SquareClick,\n\t\t\tclickSqPosition : position\n\t\t};\n\t\t\n\t\tdispatch(action);\n\t};\n\t\n\treturn <div className={clazz} onClick={handleClick}> </div>;\n};\n\nfunction LetterSquare({piece, position} : ISquareProps) {\n\n\tconst { clickState, firstClicked, secondClicked } = useSelector(clickSelector);\n\tconst dispatch = useDispatch();\n\n\tconst clazz = classNames({\n\t\tBlackSquare : isBlackSquare(position),\n\t\tWhiteSquare : !isBlackSquare(position),\n\t\tSquareFirstClicked : clickState === ClickState.FirstClicked && areSameSquares(position, firstClicked),\n\t\tSquareSecondClicked : clickState === ClickState.SecondClicked && areSameSquares(position, secondClicked)\n\t});\n\t\n\tconst letterColorClass = piece.white ? 'WhiteLetter' : 'BlackLetter';\n\tconst letterClass = `SquareLetter ${letterColorClass} `;\n\t\n\tconst handleClick = e => {\n\t\te.preventDefault();\n\t\t\n\t\tconst action : IStateChangeAction = {\n\t\t\ttype : ActionType.SquareClick,\n\t\t\tclickSqPosition : position\n\t\t};\n\t\t\n\t\tdispatch(action);\n\t\t\n\t};\n\t\n\treturn (\n\t\t<div className={clazz} onClick={handleClick}>\n\t\t\t<span className={letterClass}> { piece.letter} </span>\n\t\t</div>\n\t);\n};\n\nfunction GenericSquare(){\n\t\n}\n\n\t\nconst initialContext : IContext = {\n\tisSquareImgType : true,\n\ttoggleSqImgType : () => console.log('Toggled!')\n};\n\nconst ThemeContext = React.createContext(initialContext);\n\nfunction Rank({squares} : IRankProps) {\n\treturn (\n\t\t<div className=\"Rank\">\n\t\t\t{ \n\t\t\t\tsquares.map( (sqProps,i) => (\n\t\t\t\t\t<ThemeContext.Consumer>\n\t\t\t\t\t{\n\t\t\t\t\t\t({isSquareImgType}) => {\n\t\t\t\t\t\t\tif (isSquareImgType) return <Square key={i} {...sqProps}  />;\n\t\t\t\t\t\t\telse return <LetterSquare key={i} {...sqProps}  />;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t</ThemeContext.Consumer>\n\t\t\t\t))\n\t\t\t}\n\t\t</div>\n\t);\n};\n\n\nfunction ChessBoard({boardConfig , chessBoardStyle} : IChessBoardProps) {\n\t\n\treturn (\n\t\t<div className=\"ChessBoard\" style={chessBoardStyle}>\n\t\t\t{\n\t\t\t\tboardConfig.map( (rankProps, i) => {\n\t\t\t\t\treturn <Rank key={i} {...rankProps} />;\n\t\t\t\t})\n\t\t\t}\n\t\t</div>\n\t);\n};\n\n\n\nfunction App() {\n\t\n\tconst [ fontSize , setFontSize ] = React.useState(20); // in px\n\t\n\tconst [ themeContext, setThemeContext ] = React.useState({\n\t\tisSquareImgType : true\n\t});\n\t\n\tconst onToggle = () => {\n\t\tsetThemeContext({\n\t\t\tisSquareImgType : !themeContext.isSquareImgType\n\t\t});\n\t};\n\t\n\t\n\tconst sliderProps : ISliderProps = {\n\t\tmin : 10,\n\t\tmax : 30,\n\t\tstep : 1,\n\t\tdefaultValue : fontSize,\n\t\tclassName : 'Slider',\n\t\tonChange : (e) => {\n\t\t\te.preventDefault();\n\t\t\tsetFontSize(e.target.value);\n\t\t}\n\t};\n\t\n\tconsole.log('Font size is ' , fontSize);\n\t\n\tconst chessBoardStyle = { \"font-size\" : `${fontSize}px`};\n\n\tconst { boardConfig } = useSelector(clickSelector);\n\t\n\t/*\n\tconst initialContext : IContext = {\n\t\tisSquareImgType : true,\n\t\ttoggleSqImgType : () => {\n\t\t\tthis.isSquareImgType = !this.isSquareImgType;\n\t\t}\n\t};\n\t*/\n\t\n\t\n\treturn (\n\t\t<ThemeContext.Provider value={themeContext} >\n\t\t\t<div className=\"App \">\n\t\t\t\t<div>\n\t\t\t\t\t<Slider {...sliderProps} />\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\tChange square image : \n\t\t\t\t\t<ThemeContext.Consumer >\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t(ctx : IContext) => (\n\t\t\t\t\t\t\t\t<ToggleButton value={ctx.isSquareImgType} onToggle={onToggle} />\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t}\n\t\t\t\t\t</ThemeContext.Consumer>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t\t<div className=\"ChessBoardWrapperDiv\" >\n\t\t\t\t\t<ChessBoard boardConfig={boardConfig} chessBoardStyle={chessBoardStyle}/>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ThemeContext.Provider>\n\t);\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\n//import reportWebVitals from './reportWebVitals';\nimport {store as Store } from './state';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n\t<Provider store={Store} >\n\t\t<App />\n\t</Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}